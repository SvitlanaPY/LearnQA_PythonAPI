class TestExample:
    def test_check_math1(self):
        a = 5
        b = 9
        expected_sum = 14
        assert a + b == expected_sum, f"Sum of variables a and b is not equal {expected_sum}"

    def test_check_math2(self):
        a = 5
        b = 11
        expected_sum = 14
        assert a + b == expected_sum, f"Sum of variables a and b is not equal {expected_sum}"


# pytest - бібліотека, що дозволяє звичайну послідовність дій оформляти у тести і стандиртизувати спосіб перевірки будь-чого.
# ф-ія assert вимагає, щоб вираз біля неї був приведений до типу boolean (тобто дорівнювати true або false).
# якщо вирази справа і зліва будуть рівні, то повернеться True.
# для запуску тестів використовуватиму командну стрічку в Terminal.
# python -m pytest test_#3_1_simple_test_examples.py -k "test_check_math1", де через -m вказується модуль, що запускає програму, тобто pytest
# далі вказуємо шлях до файлу, де лежать тести, які будемо запускати,
# через ключ -k ми вказуєо конкретно той тест, який ми будемо запускати з файлу (якщо у файлі кілька тестів, а нам потрібно запустити лише конкретний тест)
# (якщо ми напишемо  -k "test_check_math", то запустяться ВСІ тести, назва яких починається на -"test_check_math")
# після проходження кожен тест показується у стрічці виводу або через червону букву F(тест впав) або через зелену крапочку(тест пройшов успішно)
# якщо в assert прийде значення false, то pytest помітить такий тест як failed,
# це означає, що очікуване значення не співпало з поточним значенням і щось пішло не так
# другим параметром до assert може іти сам текст помилки
# назви усіх тестів мають починатись зі слова test,
# функція, яка не містить слова test, вважається допоміжною, і в неї ми можемо виносити якусь частину логіки і перевикористовувати її

